(function(){
  'use strict'
  angular.module('music-player', ['ionic','ngCordova','LocalForageModule','angularRipple'])

  .run(function($ionicPlatform,$rootScope,$cordovaStatusbar,$localForage) {
    $rootScope.hideMiniControls = false

    //themes
    var themes = [
      { 
        id : 'brown',
        name : 'Brown',
        active : 1
      },
      { 
        id : 'material',
        name : 'Material',
        active : 0
      },
      { 
        id : 'dark',
        name : 'Dark',
        active : 0
      }
    ]

    $rootScope.style = 'brown'

    $localForage.getItem('themes').then(function(t){
      var current = _.find(t,{'active':1})
      console.log(current)
      if(undefined == current || null == current){
        $rootScope.style = themes[0].id
      }else{
        $rootScope.style = current.id
      }


      switch($rootScope.style){
        case 'material':
          window.plugins.tintstatusbar.setColor('#004540')
        break;
        
        default:
        case 'brown':
          window.plugins.tintstatusbar.setColor('#291e22')
        break;
      }

    })

    $ionicPlatform.ready(function() {

      if (window.cordova && window.cordova.plugins.Keyboard) {
        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
        cordova.plugins.Keyboard.disableScroll(true);
      }
     
      // org.apache.cordova.statusbar required
      //window.plugins.tintstatusbar.setColor('#4E407D')
      if (cordova.platformId == 'android') {
          //console.log('soy => '+cordova.platformId)
          //statusbarTransparent.enable()
          switch($rootScope.style){
            case 'material':
              window.plugins.tintstatusbar.setColor('#004540')
            break;
            
            default:
            case 'brown':
              window.plugins.tintstatusbar.setColor('#291e22')
            break;
          }
      }
        

        //servicio de background https://github.com/phpsa/cbsp
       $rootScope.inBackground = false
       document.addEventListener('pause',function(){
          $rootScope.inBackground = true

          cordova.plugins.backgroundMode.configure({
              title: 'Runing Vigets Player'
          })

          cordova.plugins.backgroundMode.enable();
          //var bgservice = cordova.require('com.red_folder.phonegap.plugin.backgroundservice.BackgroundService');

           // Called when background mode has been activated
          cordova.plugins.backgroundMode.onactivate = function() {
            // if track was playing resume it
            setInterval(function () {
                if($rootScope.songhasend){
                   $rootScope.nextSong($rootScope.songPosition);
                }
                // Modify the currently displayed notification
                /*cordova.plugins.backgroundMode.configure({
                    text:'Running in background for more than 5s now.'
                });*/
            }, 1000);
          }
       },false)

       document.addEventListener('resume',function(){
          $rootScope.inBackground = false
          cordova.plugins.backgroundMode.disable();
       },false)

      /*bgservice.getStatus(function(e){
         if(e.Success){
            //iniciamos el servicio
            bgservice.startService(function(r) {
                console.log('servicio started => '+r)
            },function(e) {
                console.log('servicio not started => '+JSON.stringify(e))
            });

            //cada 1s verificará si la canción se detuvo
            bgservice.enableTimer(1000,function(r) {
                console.log('timer started => '+r)
            },function(e) {
               console.log('timer not started => '+JSON.stringify(e))
            });

            bgservice.registerForUpdates(function(r) {
                console.log('register for update! => '+r)
            },function(e) {
                 console.log('not register for update! => '+JSON.stringify(e))
            });
         }
      })*/
    });
  })

  .config(function($stateProvider, $urlRouterProvider,$localForageProvider) {
    
    //obtener el tema actual



  

    //configurando la base de datos, almacenará la información de la música,
    //así como las listas de reproducción y demás configuraciones
    $localForageProvider.config({
        driver      : localforage.WEBSQL, // if you want to force a driver
        name        : 'music-player', // name of the database and prefix for your data, it is "lf" by default
        version     : 1.0, // version of the database, you shouldn't have to use this
        storeName   : 'keyvaluepairs' // name of the table
    });


    $stateProvider

    .state('app', {
      url: '/app',
      abstract: true,
      templateUrl: 'templates/menu.html'
    })

    .state('app.songlist', {
      url: '/songlist',
      views: {
        'menuContent': {
          templateUrl: 'templates/songList.html',
          controller: 'songListCtrl as songList'
        }
      }
    })

    .state('app.favourites', {
      url: '/favourites',
      views: {
        'menuContent': {
          templateUrl: 'templates/favourites.html',
          controller: 'favouritesCtrl as favourite'
        }
      }
    })

    .state('app.playlists', {
      url: '/playlists',
      views: {
        'menuContent': {
          templateUrl: 'templates/playlists.html',
          controller: 'playlistCtrl as playlist'
        }
      }
    })

    .state('app.playlistsongs', {
      url: '/songs/:pid',
      views: {
        'menuContent': {
          templateUrl: 'templates/playlist-songs.html',
          controller: 'playlistSongCtrl as plsongs'
        }
      }
    })

    .state('app.songdetails', {
      url: '/song/:id',
      views: {
        'menuContent': {
          templateUrl: 'templates/songDetails.html',
          controller: 'songDetailsCtrl as song'
        }
      }
    })

    .state('app.settings', {
      url: '/settings',
      views: {
        'menuContent': {
          templateUrl: 'templates/settings.html',
          controller: 'settingsCtrl as settings'
        }
      }
    })

    /*.state('app.nowplaying', {
      url: '/nowplaying/:id/:position/:play',
      views: {
        'menuContent': {
          templateUrl: 'templates/nowPlaying.html',
          controller: 'nowPlayingCtrl as playing'
        }
      }
    })*/


    /*.state('app.search', {
      url: '/search',
      views: {
        'menuContent': {
          templateUrl: 'templates/search.html'
        }
      }
    })

    .state('app.browse', {
        url: '/browse',
        views: {
          'menuContent': {
            templateUrl: 'templates/browse.html'
          }
        }
      })
      
    .state('app.single', {
      url: '/playlists/:playlistId',
      views: {
        'menuContent': {
          templateUrl: 'templates/playlist.html',
          controller: 'PlaylistCtrl'
        }
      }
    });*/
    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/app/songlist');
   
  });

})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('favouritesCtrl', favouritesCtrl);

	favouritesCtrl.$inject = ['$scope','$localForage','$rootScope','favoriteSongs'];

	function favouritesCtrl($scope,$localForage,$rootScope,favoriteSongs) {
		//content
		var vm = this
		vm.list = ''
		vm.songList = ''

		$scope.$on("$ionicView.beforeEnter",function(){
			favoriteSongs.getFavoritSongs().then(function(songs){
				vm.list = songs
			},function(fail){
				console.log('Fallo porque => '+fail)
			})
		})
		
		$rootScope.globalSearch = function(){
			$rootScope.showSearch = true
		}

		//disparar evento cuando se cierre el teclado
	    window.addEventListener('native.keyboardhide', function(){
	    	$rootScope.showSearch = false
	    });
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('homeCtrl', homeCtrl);

	homeCtrl.$inject = [
		'$ionicSideMenuDelegate'
	];

	function homeCtrl($ionicSideMenuDelegate) {
		
		setTimeout(function(){
		    $ionicSideMenuDelegate.toggleLeft();
		},600)


		  var e = 'slide_effect,scale_effect,fade_effect,slide_up,wave,drop_in';
		  $scope.slide = function(se) {
		    $('.item').removeClass().addClass('item')
		    $('.item').addClass(se);
		    $('button').removeClass('active')
		    $('.b_' + se).addClass('active');
		    
		    $ionicSideMenuDelegate.toggleLeft();
		    if($ionicSideMenuDelegate.isOpen() == true){
		      setTimeout(function(){
		        $ionicSideMenuDelegate.toggleLeft();
		      },700)
		    }
		  };

	}

})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('listCtrl', listCtrl);

	listCtrl.$inject = [];

	function listCtrl() {
		
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('nowPlayingCtrl', nowPlayingCtrl);

	nowPlayingCtrl.$inject = ['$ionicLoading','$cordovaSocialSharing','$ionicPopover','$scope','$rootScope','$localForage','$stateParams','$cordovaMedia','favoriteSongs'];

	function nowPlayingCtrl($ionicLoading,$cordovaSocialSharing,$ionicPopover,$scope,$rootScope,$localForage,$stateParams,$cordovaMedia,favoriteSongs) {
		//content
		var vm = this,
		duration = 0,
		currentSongPosition = parseInt($stateParams.position),
		currentSongId = $stateParams.id,
		playSongAtEnter = $stateParams.play
		vm.song = "";
		vm.totalDuration = 0
		var currentTiemSong = {
			h : 0,
			m : 0,
			s : 0
		}

		vm.playlists
		vm.submenu = false

		vm.isFavorite = false
		$rootScope.isShuffle = false
		$rootScope.isFromPlaylist = false

		$rootScope.songhasend = false

		//@$stateParams.id identificador de cancion
		//@$stateParams.position posición del arreglo

		$ionicPopover.fromTemplateUrl('templates/popover.html', {
	    	scope: $scope
	 	}).then(function(popover) {
	    	$scope.popover = popover;
	  	});

		vm.openPopover = function($event){
			$scope.popover.show($event);

			//get al playlist
	 		$localForage.getItem('playlist').then(function(playlists){
	 			vm.playlists = playlists
	 		})
	 	}

	 	vm.closePopover = function(){
	 		$scope.popover.hide()
	 	}

	 	$rootScope.shareVia = function(platform){
	 		$ionicLoading.show({
		      template: '<ion-spinner></ion-spinner><p>Please wait ...</p>'
		    });
	 		$rootScope.closePopOver()

	 		//imagen o url
	 		if($rootScope.songCover.indexOf('http') == -1){
	 			$rootScope.songCover = 'file://'+$rootScope.songCover
	 		}

	 		switch(platform){
	 			case 'Facebook':
	 				
 				$cordovaSocialSharing
			    .shareViaFacebook('I\'m listening '+$rootScope.songTitle+' | '+$rootScope.songAuthor, $rootScope.songCover, '')
			    .then(function(result) {
			      // Success!
			      $ionicLoading.hide();
			    }, function(err) {
			    	$ionicLoading.hide();
			      // An error occurred. Show a message to the user
			    });

	 			break;
	 			case 'Twitter':

	 			$cordovaSocialSharing
			    .shareViaTwitter('I\'m listening '+$rootScope.songTitle+' | '+$rootScope.songAuthor, $rootScope.songCover, '')
			    .then(function(result) {
			      // Success!
			      $ionicLoading.hide();
			    }, function(err) {
			    	$ionicLoading.hide();
			      // An error occurred. Show a message to the user
			    });

	 			break;
	 			case 'Whatsapp':

	 			$cordovaSocialSharing
			    .shareViaWhatsApp('I\'m listening '+$rootScope.songTitle+' | '+$rootScope.songAuthor, $rootScope.songCover, '')
			    .then(function(result) {
			      // Success!
			      $ionicLoading.hide();
			    }, function(err) {
			    	$ionicLoading.hide();
			      // An error occurred. Show a message to the user
			    });

	 			break;
	 		}
	 	}

	 	$rootScope.closePopOver = vm.closePopover

	 	vm.addToPlaylist = function(pid,sid){
	 		if(undefined != pid && undefined != sid){
	 			//buscar la cancion en songList
	 			$localForage.getItem('songList').then(function(songs){
	 			
	 				if(undefined != songs && songs.length > 0){
	 					var song = _.find(songs,{'Id' : sid})

	 					if(undefined != song){
	 						//añadimos la canción la playlist
	 						song.pid = pid

	 						$localForage.getItem('playlistSongs').then(function(psongs){
	 							if(undefined != psongs && psongs.length > 0){
	 								//existen canciones
	 								//verificar que no exista en la playlist
	 								var exist = _.findIndex(psongs,song);
	 								//console.log('exist => '+exist,psongs[exist])

	 								if(undefined != psongs[exist] || null != psongs[exist]){
	 									//avisar
	 									console.log('ya existe en esta lista')
	 								}else{
	 									//console.log('no existe')
	 									psongs.push(song)
	 									$localForage.setItem('playlistSongs',psongs)
	 								}
	 							}else{
	 								var psongs = []
	 								psongs.push(song)
	 								$localForage.setItem('playlistSongs',psongs)
	 								//no existen canciones
	 							}
	 						})
	 					}
	 				}
	 			})
	 		}
	 	}

		vm.getCurrentSong = function(id,position,plsid){
			document.getElementById('timer').style.width = '0%'
			//colores
			setTimeout(function(){


			var img = document.querySelector('#vibimg'),
			vibrant = new Vibrant(img),
            swatches = vibrant.swatches(),
            vibrantColor = swatches['Vibrant'],
             
            // ['Vibrant', 'Mutted', ...]
            // swatches;
         
            // Regresa el color en RGB
            rgb = vibrantColor.getRgb(),
         
            // Regresa el color en hexadecimal                   
            hex = vibrantColor.getHex(),
         
            // Regresa el color en HSL
            hsl = vibrantColor.getHsl(),
         
            // Regresa la cantidad de veces que el color aparece en la imagen procesada
            population = vibrantColor.getPopulation(),            
         
            // Regresa el color recomendado para títulos sobre este color
            titleColor = vibrantColor.getTitleTextColor(), 
         
            // Regresa el color recomendado para párrafos sobre este color
            bodyColor = vibrantColor.getBodyTextColor();

            //window.plugins.tintstatusbar.setColor(hex)

            //cambiar los colores de los controles dependiendo de vagrant
            var components = document.getElementsByClassName('control'),
            buttons = document.getElementsByClassName('action-box')

            for(var i = 0; i < components.length; i++){
			    components[i].style.color = hex //color
			    components[i].style['text-shadow'] = '1px 0px 13px '+hex //shadow
			}

			for(var i = 0; i < buttons.length; i++){
			    buttons[i].style.border = hex //color
			    buttons[i].style['box-shadow'] = '1px 0px 13px '+hex //shadow
			}

            //console.log(rgb,hex,hsl,population,titleColor,bodyColor);

            //setear colores recomendados 
            document.getElementById('song-artist').style.color = titleColor
            document.getElementById('song-duration').style.color = titleColor
            document.getElementById('song-title').style.color = titleColor
            },250)
			$rootScope.songhasend = false
			//si el id y la posición no están vacíos
			$rootScope.hideMiniControls = false
			vm.durationensecs = 0
			///console.log(id,position,plsid)
			if(undefined != id && undefined != position){

				//verificar que la canción provenga de una playlist
				var db = 'songList'
				if($rootScope.isFromPlaylist && plsid > 0){
					db = 'playlistSongs'
					$rootScope.plsid = plsid
				}else{
					$rootScope.isFromPlaylist = false
				}
				$localForage.getItem(db).then(function(songs) {
					//se parseo el Id porque sino, no encuentra la canción,
					//por el tipo de dato
					//limpiar el intervalo de tiempo
					clearInterval(duration)
					clearIntervals()
					if($rootScope.isFromPlaylist){
						//console.log(songs)
						//buscar las canciones de la playlist
						vm.song = _.find(songs,{ 'pid' : parseInt(plsid), 'Id': id })
						//console.log('desde play list => '+JSON.stringify(vm.song))
						//buscar la canción en cuestión
						//vm.song = _.find(plsSongs, { 'Id': id });
					}else{
						vm.song = _.find(songs, { 'Id': id });
						//console.log('reprod normal => '+JSON.stringify(vm.song))
					}	
					
					vm.sonDuration = vm.song.Duration / 1000
					vm.durationensecs = parseInt(vm.song.Duration) / 1000       
		        	vm.totalDuration = secs2time(parseInt(vm.song.Duration)/1000);
		        	vm.song.Duration = secs2time(parseInt(vm.song.Duration)/1000);
		        	$rootScope.songTitle = vm.song.Title
		        	$rootScope.songAuthor = vm.song.Author
		        	$rootScope.songCover = vm.song.Cover
		        	$rootScope.songId = id
		        	$rootScope.songPosition = position
		        	//console.log(id)

		        	//verificar que sea favorita
		        	favoriteSongs.isFavorite(id).then(function(is){
		        		//console.log('la cancion es favorita? => '+is)
		        		if(is == 'true'){
			    			vm.isFavorite = true
		        		}else{
		        			vm.isFavorite = false
		        		}
		        	})

		        	//widget
			        MusicControls.destroy()

			        MusicControls.create({
					    track: vm.song.Title,				//Requierd 
						artist: vm.song.Author,			//Required 
					    cover: vm.song.Cover,	//Required 
						album: vm.song.Album,				//Optional, Only visible on Android 
					    isPlaying: true,				//Required
						ticker : "Escuchando : "+vm.song.Title
					}, onSuccess, onError);

			        if($rootScope.isPlaying){
						vm.stopSong(); //detener la canción actual
					}
			        //comienza para reproducción
					$rootScope.media = $cordovaMedia.newMedia(vm.song.Path);
					
					$rootScope.playSong()
					
					//almacenar la posición actual de la canción
					$rootScope.songPosition = position
					$rootScope.isPlaying = true;

					document.getElementById('circle').style['stroke-dashoffset'] = 200
					//actualizar la barra de tiempo
					var time = vm.durationensecs; /* how long the timer runs for */
					var initialOffset = '200';
					var i = 1
					$rootScope.interval = setInterval(function() {
					document.getElementById('circle').style['stroke-dashoffset'] = initialOffset-(i*(initialOffset/time))
					    if (i == time) {
					    	clearIntervals()
					    }
					    if(!$rootScope.pauseInterval){
					    	i++;  
					    }
					}, 1000);

					//duración de canción
					duration = setInterval(function(){
						//vm.song.Duration => {h,i,s}
						$rootScope.media.currentTime().then(
							function(data){
								//console.log('tiempo => '+data)
								if(undefined == data.status){
									clearInterval(duration)
									$rootScope.nextSong($rootScope.songPosition);
								}
								var tiempoActual = secs2time(Math.round(data.status.value))
								//var maxDuration = data.status.value
								var sec = 0;
								var mins = 0;
								var hrs = 0;
								if(tiempoActual.h <= 9){
									hrs = '0'+tiempoActual.h
								}else{
									hrs = tiempoActual.h
								}
								if(tiempoActual.m <= 9){
									mins = '0'+tiempoActual.m
								}else{
									mins = tiempoActual.m
								}
								if(tiempoActual.s <= 9){
									sec = '0'+tiempoActual.s
								}else{
									sec = tiempoActual.s
								}

								//actualizar el tiempo de la canción
								vm.song.Duration.h = hrs
								vm.song.Duration.m = mins
								vm.song.Duration.s = sec
								//console.log(data.status.value,vm.sonDuration)
								//material design
								//var timer = parseInt(document.getElementById('timer').style.width)
								var current = (data.status.value * 100) / vm.sonDuration
                            	//mediaDiv =  self.$actualSongStatus ? self.$actualSongStatus : $('#SongStatus');
                            	document.getElementById('timer').style.width = current+'%'
                        		//mediaDiv.css("width",current+'%');
								//verificar cuado acabe una canción y cambiar a la siguiente
								
								if(parseInt(hrs) == vm.totalDuration.h 
									&& parseInt(mins) == vm.totalDuration.m 
									&& parseInt(sec) == (vm.totalDuration.s)
								){
									//console.log(hrs,mins,sec,vm.totalDuration.h,vm.totalDuration.m,vm.totalDuration.s-2)
									if($rootScope.inBackground){
										$rootScope.songhasend = true
									}else{
										$rootScope.nextSong($rootScope.songPosition);
									}
									

								}
							},
							function(error){
								console.log('error => '+error)
							}
						);
						
					},1000)
		        });

			}
		}

		function clearIntervals(){
			clearInterval($rootScope.interval);
		}

		function onSuccess(success){
			//console.log('Bien! => '+success)

			function events(action) {
				switch(action){
					case 'music-controls-next':
						//Do something 
						clearIntervals()
						$rootScope.nextSong($rootScope.songPosition);
					break;
					case 'music-controls-previous':
						//Do something 
						clearIntervals()
						$rootScope.prevSong($rootScope.songPosition);
					break;
					case 'music-controls-pause':
						//Do something
						if($rootScope.isPlaying){
							$rootScope.pauseSong()
							MusicControls.updateIsPlaying(false);
						}else{
							$rootScope.playSong()
							MusicControls.updateIsPlaying(true);
						}
					break;
					case 'music-controls-play':
						//Do something 
						$rootScope.playSong()
						MusicControls.updateIsPlaying(true);
					break;
			 
					//Headset events 
					case 'music-controls-headset-unplugged':
						//Do something 
						break;
					case 'music-controls-headset-plugged':
						//Do something 
						break;
					case 'music-controls-headset-button':
						//Do something 
						break;
					default:
						break;
				}
			}

			//Register callback 
			MusicControls.subscribe(events);
			 
			//Start listening for events 
			MusicControls.listen();
		}

		function onError(error){
			console.log('error => '+error)
		}

		$rootScope.playSong = function(){
			$rootScope.isPlaying = true
			$rootScope.pauseInterval = false
			$rootScope.media.play()
		}
		$rootScope.pauseSong = function(){
			$rootScope.isPlaying = false
			$rootScope.pauseInterval = true
			$rootScope.media.pause()
		}
		vm.stopSong = function(){
			$rootScope.media.stop()
		}
		$rootScope.nextSong = function(position){
			position = (undefined != position) ? position : 0;
			
			var db = 'songList'
			if($rootScope.isFromPlaylist){
				db = 'playlistSongs'
				console.log('posición actual => '+position)
			}
			//si está activado el shuffle
			if(!$rootScope.isShuffle){
				$localForage.getItem(db).then(function(songs) {

					//buscar la posición de playlists
					if($rootScope.isFromPlaylist){
						var newSongs = []
						for(var i = 0; i < songs.length; i++){
							if(songs[i].pid == parseInt($rootScope.plsid)){
								newSongs.push(songs[i])
							}
						}

						songs = newSongs
						//console.log(songs)
					}

					var posicion = songs[position+1]

					//posicion devuelve un objeto de cancion
					var Id = (undefined != posicion) ? posicion.Id : songs[0].Id ;
					if(undefined != posicion){
					   if($rootScope.isFromPlaylist){
					   		vm.getCurrentSong(Id,parseInt(position)+1,$rootScope.plsid)
					   }else{
					   		vm.getCurrentSong(Id,parseInt(position)+1)
					   }	
					}else{
						//mostrar la primera canción de la lista
					    if($rootScope.isFromPlaylist){
					   		vm.getCurrentSong(Id,0,$rootScope.plsid)
					   }else{
					   		vm.getCurrentSong(Id,0)
					   }
					}
				});
			}else{
				$localForage.getItem(db).then(function(songs){

					//buscar la posición de playlists
					if($rootScope.isFromPlaylist){
						var newSongs = []
						for(var i = 0; i < songs.length; i++){
							if(songs[i].pid == parseInt($rootScope.plsid)){
								newSongs.push(songs[i])
							}
						}

						songs = newSongs
						//console.log(songs)
					}

		    		var length = songs.length,
		    		newposition = _.random(length),
		    		playthis = songs[newposition]

		    		//buscar la posición de playlists
					if($rootScope.isFromPlaylist){
						vm.getCurrentSong(playthis.Id,newposition,$rootScope.plsid)
					}else{
						vm.getCurrentSong(playthis.Id,newposition)
					}
		    		
		    	})
			}
		}

		$rootScope.prevSong = function(position){
			position = (undefined != position) ? position : 0;
			
			var db = 'songList'
			if($rootScope.isFromPlaylist){
				db = 'playlistSongs'
				console.log('posición actual => '+position)
			}
			//si está activado el shuffle
			if(!$rootScope.isShuffle){
				$localForage.getItem(db).then(function(songs) {

					//buscar la posición de playlists
					if($rootScope.isFromPlaylist){
						var newSongs = []
						for(var i = 0; i < songs.length; i++){
							if(songs[i].pid == parseInt($rootScope.plsid)){
								newSongs.push(songs[i])
							}
						}

						songs = newSongs
						//console.log(songs)
					}

					var posicion = songs[position-1]

					//posicion devuelve un objeto de cancion
					var Id = (undefined != posicion) ? posicion.Id : songs[0].Id ;
					if(undefined != posicion){
					   if($rootScope.isFromPlaylist){
					   		vm.getCurrentSong(Id,parseInt(position)-1,$rootScope.plsid)
					   }else{
					   		vm.getCurrentSong(Id,parseInt(position)-1)
					   }	
					}else{
						//mostrar la primera canción de la lista
					    if($rootScope.isFromPlaylist){
					   		vm.getCurrentSong(Id,0,$rootScope.plsid)
					   }else{
					   		vm.getCurrentSong(Id,0)
					   }
					}
				});
			}else{
				$localForage.getItem(db).then(function(songs){

					//buscar la posición de playlists
					if($rootScope.isFromPlaylist){
						var newSongs = []
						for(var i = 0; i < songs.length; i++){
							if(songs[i].pid == parseInt($rootScope.plsid)){
								newSongs.push(songs[i])
							}
						}

						songs = newSongs
						//console.log(songs)
					}

		    		var length = songs.length,
		    		newposition = _.random(length),
		    		playthis = songs[newposition]

		    		//buscar la posición de playlists
					if($rootScope.isFromPlaylist){
						vm.getCurrentSong(playthis.Id,newposition,$rootScope.plsid)
					}else{
						vm.getCurrentSong(playthis.Id,newposition)
					}
		    		
		    	})
			}	
		}

		function secs2time(secs){
	        var hours = Math.floor(secs / (60 * 60));

	        var divisor_for_minutes = secs % (60 * 60);
	        var minutes = Math.floor(divisor_for_minutes / 60);

	        var divisor_for_seconds = divisor_for_minutes % 60;
	        var seconds = Math.ceil(divisor_for_seconds);

	        var obj = {
	            "h": hours,
	            "m": minutes,
	            "s": seconds
	        };
	        return obj;
	    }

	    //other controls
	    $rootScope.shuffle = function(){
	    	//reproducir canciones aleatorias (sencillo)
	    	//obtener la longitud de las canciones
	    	if($rootScope.isShuffle){
	    		$rootScope.isShuffle = false
	    	}else{
		    	$rootScope.isShuffle = true
	    	}
	    	
	    }

	    $rootScope.addtoFavorites = function(id){
	    	//añadir a favoritos
	    	favoriteSongs.isFavorite(id).then(function(is){
        		//console.log('la cancion es favorita? => '+is,id)
        		if(is == 'true'){
        			//console.log('si es favorita')
        			favoriteSongs.deleteSong(id)
	    			vm.isFavorite = false
        		}else{
        			//console.log('no es favorita')
        			favoriteSongs.addtoFavorite(id)
	    			vm.isFavorite = true
        		}
        	})
	    }

	    $rootScope.$on('playSong', function(event, args) {
	    	vm.getCurrentSong(args.id,args.position)
	    });

	    $rootScope.$on('fromPlaylist',function(event,args){
	    	$rootScope.isFromPlaylist = true
	    	console.log('datos => '+JSON.stringify(args))
	    	vm.getCurrentSong(args.id,args.position,args.plsid)
	    })

	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('playlistCtrl', playlistCtrl);

	playlistCtrl.$inject = ['$scope','$rootScope','$localForage'];

	function playlistCtrl($scope,$rootScope,$localForage) {
		//content
		var vm = this
		vm.playlists = ''
		$scope.$on("$ionicView.beforeEnter",function(){
			//mostrar el boton de añadir nueva
			$rootScope.isPlaylist = true
			vm.getPlaylists()
		})

		$scope.$on("$ionicView.beforeLeave",function(){
			//mostrar el boton de añadir nueva
			$rootScope.isPlaylist = false
		})

		vm.getPlaylists = function(){
			$localForage.getItem('playlist').then(function(pls){
				//console.log(pls)
				if(undefined != pls && null != pls && pls.length > 0){
					vm.playlists = pls
				}
			})
		}

		$rootScope.addnewPlayList = function(){
			//añadir nueva playlist
			var plsname = prompt('Create new playlist','', ['Cancel,Perfect!'], 'New Playlist');
			
			if(plsname != ''){

				$localForage.getItem('playlist').then(function(playlist){
					if(undefined != playlist && null != playlist && playlist.length > 0){
						//buscar el nombre actual
						var pls = _.find(playlist,{'name' : plsname})

						if(undefined != pls && null != pls){
							//alert('There is one playlist with same name, do you want to delete it?')
						}else{
							var currentPlayLists = playlist,
							plsInfo = {
								id : Math.floor((Math.random() * 9999) + 1111),
								name : plsname,
								songs : []
							}

							currentPlayLists.push(plsInfo)
							$localForage.setItem('playlist',currentPlayLists);
						}
					}else{
						//crearla
						var currentPlayLists = [{
							id : Math.floor((Math.random() * 9999) + 1111),
							name : plsname,
							songs : []
						}]

						$localForage.setItem('playlist',currentPlayLists);
					}

					vm.getPlaylists()
				})
			}
		}

		vm.playNow = function(plsdid,id,position){
			if(plsid > 0){
				//buscar la playlist, y reproducir todas las canciones en ella, en cola
				var args = {
					plsid : plsdid,
					id : id,
					position : position
				}
				$rootScope.$emit('fromPlaylist', args);
			}else{
				//return false
			}
		}

		vm.addToPlayList = function(plsid,song){
			//do something
		}


	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('playlistSongCtrl', playlistSongCtrl);

	playlistSongCtrl.$inject = ['$scope','$rootScope','$localForage','$stateParams']

	function playlistSongCtrl($scope,$rootScope,$localForage,$stateParams) {
		//content
		var vm = this,
		plsid = $stateParams.pid

		
		$scope.$on("$ionicView.enter",function(){
			vm.list = []
			$localForage.getItem('playlistSongs').then(function(psongs){
				//encontrar las canciones de esta playlist
				//console.log(psongs.length)
				for(var i = 0; i < psongs.length; i++){
					if(psongs[i].pid == parseInt(plsid)){
						vm.list.push(psongs[i])
					}
				}
				//vm.list.push(_.find(psongs,{'pid' : parseInt(plsid)}))
				//console.log(_.find(psongs,{'pid' : plsid}))
			})

			if(vm.list.length == 0){
				console.log('No hay canciones aún')
			}
		})

		vm.play = function(id,position){
			var args = {
				plsid : plsid,
				id : id,
				position : position
			}
			//console.log(args)
			$rootScope.$emit('fromPlaylist',args)
		}
		//get songs lists from selected playlist
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('settingsCtrl', settingsCtrl);

	settingsCtrl.$inject = ['$localForage','$rootScope'];

	function settingsCtrl($localForage,$rootScope) {
		//content
		var vm = this

		//vm.curTheme = 'brown'

		vm.getcurrentTheme = function(){
			$localForage.getItem('themes').then(function(themes){
				if(undefined != themes && themes.length > 0){
					var actual = _.find(themes,{'active':1})
					vm.curTheme = actual
				}else{
					
					//temas
					var temas = [
						{	
							id : 'brown',
							name : 'Brown',
							active : 1
						},
						{	
							id : 'material',
							name : 'Material',
							active : 0
						},
						{	
							id : 'dark',
							name : 'Dark',
							active : 0
						}
					]

					//guardarlos
					$localForage.setItem('themes',temas)

					vm.curTheme = 'brown'
				}
			})

			console.log(vm.curTheme)
		}

		vm.setTheme = function(theme){
			
			$localForage.getItem('themes').then(function(themes){
				var find = _.find(themes,{'id' : theme}),
				newThemes = []
				if(undefined != find){
					$rootScope.style = theme
					vm.curTheme = theme

					if(vm.curTheme == 'material'){
						 window.plugins.tintstatusbar.setColor('#004540')
					}else{
						 window.plugins.tintstatusbar.setColor('#291e22')
					}
					//check as active
					for(var i = 0; i < themes.length; i++){
						if(themes[i].id == theme){
							themes[i].active = 1
						}else{
							themes[i].active = 0
						}
						newThemes.push(themes[i])
					}

					//save new config
					$localForage.setItem('themes',newThemes)
				}
			})
		}

		vm.getcurrentTheme()
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('songDetailsCtrl', songDetailsCtrl);

	songDetailsCtrl.$inject = ['$cordovaFile','$timeout','$ionicLoading','$cordovaDialogs','$http','$stateParams','$localForage','$rootScope'];

	function songDetailsCtrl($cordovaFile,$timeout,$ionicLoading,$cordovaDialogs,$http,$stateParams,$localForage,$rootScope) {
		//content
		var vm = this,
		songId = $stateParams.id

		vm.songDetails = ''

		/*document.addEventListener('DOWNLOADER_downloadSuccess', function(event){
		  	var data = event.data;
		  	var path = cordova.file.externalRootDirectory.replace('file://','')+data[0].name;
			
		  	//renombrar el archivo descargado
		  	var newName = randomString()+'.jpg'
			  $cordovaFile.moveFile(cordova.file.externalRootDirectory, data[0].name, cordova.file.externalDataDirectory,newName)
		      .then(function (success) {
		        // success
		        console.log(success)
		       
				vm.songDetails.Cover = cordova.file.externalDataDirectory.replace('file://','')+newName
				

				cordova.plugins.blurImage.blurImage(vm.songDetails.Cover,
				function(blurPath){	  
					//blur
				 	 vm.songDetails.Blur = blurPath;
				},function(e){  alert('Oops! there was an errro! => '+e)  })
				console.log(vm.songDetails)

		      }, function (error) {
		        // error
		         console.log('error al mover => '+JSON.stringify(error))
		      });

		});*/
		//blurear la imagen :D

		//save files
		//downloader.init({folder: "/", fileSystem : cordova.file.externalRootDirectory});
							

		vm.getSong = function(songId){

			$localForage.getItem('songList').then(function(songs){
				//buscar la cancion
				var song = _.find(songs,{'Id':songId})
				vm.songDetails = song
			})
		}

		vm.getInfoFromLastFM = function(){
			$cordovaDialogs.confirm('Do you want to get track info automaticatelly?', 'Hey!', ['Please','Nope'])
		    .then(function(buttonIndex) {
		      // no button = 0, 'OK' = 1, 'Cancel' = 2
		      var btnIndex = buttonIndex;
		      if(btnIndex == 1){

			    $ionicLoading.show({
			      template: '<ion-spinner></ion-spinner><p>Please wait ...</p>'
			    });
			    /*
		      	$http({
				  method: 'GET',
				  url: 'http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=8cf3a69f80d503675694282e32960069&track='+vm.songDetails.Title+'&artist='+vm.songDetails.Author+'&format=json'
				}).then(function successCallback(response) {
			    	//console.log(response)
					$ionicLoading.hide()
					var track = response.data.track,
					message = response.data.message

					if(undefined != message && message != ""){
						alert(message)
					}else{
						//console.log(track.album.image[2]['#text'])
						
						//suele tener más de una imagen , es un arreglo
						
						if(undefined != track.album){
							//descargar el cover art para ponerle blur
							downloader.init({folder: "covers"});
							downloader.get(track.album.image[2]['#text']);
							vm.songDetails.Cover = track.album.image[2]['#text']
							vm.songDetails.Blur = "covers/"+getFilename(track.album.image[2]['#text'])+'.png';
						}else{
							vm.songDetails.Cover = "img/vinyl.png"
							vm.songDetails.Blur = "img/vinyl.png"
						}

						if(track.name != ""){
							vm.songDetails.Title = track.name
						}else{
							vm.songDetails.Title = "<unknown>"
						}

						if(track.artist.name != ""){
							vm.songDetails.Author = track.artist.name
						}else{
							vm.songDetails.Author = "<unknown>"
						}

						if(track.album.title != ""){
							vm.songDetails.Album = track.album.title
						}else{
							vm.songDetails.Album = "<unknown>"
						}
						
					}

			  	}, function errorCallback(response) {
			    	alert('Oops! there was an error, '+response)
			    	$ionicLoading.hide()
			  	});*/

			  	$http({
			  		method : 'GET',
			  		url : 'https://itunes.apple.com/search?term='+encodeURIComponent(vm.songDetails.Title+' '+vm.songDetails.Author)+'&country=US&limit=1'
			  	}).then(function successCallback(response) {
			  		

			  		if(response.data.resultCount == 1){
			  			vm.songDetails.Title = response.data.results[0].trackName
			  			vm.songDetails.Cover = response.data.results[0].artworkUrl100.replace('100x100', '500x500')
			  			//vm.songDetails.Blur = response.data.results[0].artworkUrl100.replace('100x100', '500x500')
			  			vm.songDetails.Album = response.data.results[0].collectionName
			  			vm.songDetails.Genre = response.data.results[0].primaryGenreName
			  			vm.songDetails.Author = response.data.results[0].artistName


			  			if(vm.songDetails.Cover != ""){

			  				//downloader.get(vm.songDetails.Cover);
							//download file
							var fileTransfer = new FileTransfer(),
							fileName = randomString()+'.jpg'
							fileTransfer.download(vm.songDetails.Cover, cordova.file.externalRootDirectory + fileName, 
					        function(entry) {
					           
					        	//blur
					        	cordova.plugins.blurImage.blurImage(cordova.file.externalRootDirectory.replace('file://','') + fileName,
								function(blurPath){	  
									//blur
									 vm.songDetails.Cover = cordova.file.externalRootDirectory.replace('file://','') + fileName
								 	 vm.songDetails.Blur = blurPath;
								 	 console.log(vm.songDetails)
								},function(e){  alert('Oops! there was an errro! => '+e)  })

					        }, 
					        function(err) {
					            console.log('Err => '+JSON.stringify(err))
					        });

					        $ionicLoading.hide()

						}else{
							$ionicLoading.hide()
						}
						
						//cambiar la ruta de los archivos
						//vm.songDetails.Cover = cordova.file.externalRootDirectory+getFilename(vm.songDetails.Cover)
			  			//vm.songDetails.Blur = cordova.file.externalRootDirectory+getFilename(vm.songDetails.Cover)

			  		}else{
			  			$ionicLoading.hide()
			  			console.log(response)
			  		}

			  	}, function errorCallback(response) {
			    	alert('Oops! there was an error, '+JSON.stringify(response))
			    	$ionicLoading.hide()
			  	})

		      }
		    });
		}

		function randomString(){
			var text = "";
		    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

		    for( var i=0; i < 5; i++ )
		        text += possible.charAt(Math.floor(Math.random() * possible.length));

		    return text;
		}

		vm.reverChanges = function(){
			vm.getSong(songId)
		}

		function getFilename(url){
		   if (url){
		      var m = url.toString().match(/.*\/(.+?)\./);
		      if (m && m.length > 1)
		      {
		         return m[1];
		      }
		   }
		   return "";
		}

		vm.saveDetails = function(){
			//borrar la canción de la lista y volver a añadirla
			/*$localForage.pull({'Id':vm.songDetails.Id}).then(function(deleted){
				console.log('borrado => '+JSON.stringify(deleted))
			})*/
			$ionicLoading.show({
		      template: '<ion-spinner></ion-spinner><p>Please wait ...</p>'
		    });

			$localForage.getItem('songList').then(function(songs){
				var current = _.find(songs,{'Id':vm.songDetails.Id})

				var newSongList = _.pull(songs, current)

				//console.log(newSongList+' => lista nueva')

				newSongList.push(vm.songDetails)

				//actualizar tambien las canciones favoritas y las de las playlist
				$localForage.getItem('favoriteSongs').then(function(favoritos){
					var current = _.find(favoritos,{'Id':vm.songDetails.Id})
					//console.log('de favoritos => '+JSON.stringify(current))

					var nuevaFav = _.pull(favoritos,current)

					//la añadimos nuevamente
					nuevaFav.push(vm.songDetails)

					//guardar 
					$localForage.setItem('favoriteSongs',nuevaFav)
				})

				$localForage.getItem('playlistSongs').then(function(playlists){
					var current = _.find(playlists,{'Id':vm.songDetails.Id})
					//console.log('de palylist => '+JSON.stringify(current))

					var nuevaPlaylist = _.pull(playlists,current)

					//la añadimos nuevamente
					//añadir id de playlist

					if(undefined != current && null != current){
						vm.songDetails.pid = current.pid
						nuevaPlaylist.push(vm.songDetails)
						//guardar 
						$localForage.setItem('playlistSongs',nuevaPlaylist)
					}
				})

				//console.log('añadida la nueva cancion => '+JSON.stringify(newSongList))

				$localForage.setItem('songList',newSongList)

				//actualizar la lista de canciones actual
				$rootScope.loadSongs()
			})
			//obtener la información de last fm
			$timeout(function(){
				$ionicLoading.hide();
			},2000)
			
		}

		vm.getSong(songId)
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('songListCtrl', songListCtrl);

	songListCtrl.$inject = ['$q','$cordovaDialogs','$ionicLoading','$rootScope','$scope','$ionicModal','$cordovaFile','searchFiles','$localForage'];

	function songListCtrl($q,$cordovaDialogs,$ionicLoading,$rootScope,$scope,$ionicModal,$cordovaFile,searchFiles,$localForage) {
		//content
		var vm = this
		vm.list = ''
		vm.songList = ''
		vm.searchSong = ''

		$rootScope.globalSearch = function(){
			$rootScope.showSearch = true
		}

		//deseas actualizar la lista de canciones automáticamente?
		$rootScope.refreshSongs = function(){
			$ionicLoading.show({
		      template: '<ion-spinner></ion-spinner><p>Please wait ...</p>'
		    });
			$localForage.getItem('songList').then(function(songs){
				if(undefined != songs && null != songs && songs.length > 0){
					//vm.list = songs
					
					getAllSongsfromDevice().then(function(all){
						if(songs.length < all.length){
							var local = songs.length,
							device = all.length,
							resta = (device - local) + 1

							for(var i = 1; i < resta; i++){
								//newSongs.push(all[all.length-i]);
								songs.push(all[all.length-i])
							}
							
							//console.log(songs)
							$localForage.setItem('songList',songs);
							vm.list = songs

						}
					})
				}else{

		      	//console.log(vm.list)
		      		getAllSongsfromDevice().then(function(songs){
		      			vm.list = songs
		      			$localForage.setItem('songList',vm.list);
		      		});
		      	
		      	}
		      	$ionicLoading.hide()
				
			})

			//console.log(vm.list)
		}

		$rootScope.loadSongs = function(){

			$ionicLoading.show({
		      template: '<ion-spinner></ion-spinner><p>Please wait ...</p>'
		    });

			$localForage.getItem('songList').then(function(songs){
				if(undefined != songs && null != songs && songs.length > 0){
					vm.list = songs
					vm.list.sort(function(a,b){
					      var textA = a.Title.toUpperCase();
					      var textB = b.Title.toUpperCase();
					      return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
					})
					$ionicLoading.hide()
				}else{
					vm.list = []
					/*searchFiles.searchInDirectorys().then(function(songList){
				      	

				      	//obtener la lista

				      	for(var i = 0; i < songList.length; i++){
				      		
				      		//no mostrar los "tonos" solo se muestran canciones mayores a 30s
				      		if(songList[i].Duration > 30000){
					      		var song = {
					      			Id : (songList[i].Title + songList[i].Duration).replace(/\W+/g, "").replace(/\s/g,""),
					      			Title : songList[i].Title,
					      			Duration : songList[i].Duration,
					      			Cover : (songList[i].Cover != "") ? songList[i].Cover : "img/vinyl.png" ,
					      			Blur : (songList[i].Blur != "") ? songList[i].Blur : "img/vinyl.png" ,
					      			Author : songList[i].Author,
					      			Genre : songList[i].Genre,
					      			Path : songList[i].Path,
					      			Album : songList[i].Album
					      		}

					      		vm.list.push(song)
				      		}

				      	}

				      	//console.log(vm.list)
				      	//guardar en la base de datos la información de las canciones
				      	$localForage.setItem('songList',vm.list);

				      	$ionicLoading.hide()
				      
				    },function(error){
				      alert(error)
				    })*/
				    getAllSongsfromDevice().then(function(allsongs){
				    	vm.list = allsongs
				    	vm.list.sort(function(a,b){
						      var textA = a.Title.toUpperCase();
						      var textB = b.Title.toUpperCase();
						      return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
						})
				    	$localForage.setItem('songList',vm.list);

				      	$ionicLoading.hide()

				    })

				}
			})
			//$rootScope.refreshSongs() // verificar si hay alguna nueva
		}

		$rootScope.loadSongs() //cargar las canciones
		

		function getAllSongsfromDevice(){
			var files = []
			var deferred = $q.defer();
			searchFiles.searchInDirectorys().then(function(songList){

		      	for(var i = 0; i < songList.length; i++){
		      		
		      		//no mostrar los "tonos" solo se muestran canciones mayores a 30s
		      		if(songList[i].Duration > 30000){
			      		var song = {
			      			Id : (songList[i].Title + songList[i].Duration).replace(/\W+/g, "").replace(/\s/g,""),
			      			Title : songList[i].Title,
			      			Duration : songList[i].Duration,
			      			Cover : (songList[i].Cover != "") ? songList[i].Cover : "img/vinyl.png" ,
			      			Blur : (songList[i].Blur != "") ? songList[i].Blur : "img/vinyl.png" ,
			      			Author : songList[i].Author,
			      			Genre : songList[i].Genre,
			      			Path : songList[i].Path,
			      			Album : songList[i].Album
			      		}

			      		files.push(song)
		      		}

		      	}

		      	deferred.resolve(files)
		    },function(error){
		    	deferred.reject(error)
		    })

		    return deferred.promise

		}

	    /*vm.list = [
	    	{
      			Id : "Sorry1234123",
      			Title : "Sorry",
      			Duration : 12345,
      			Cover : "http://www.covershut.com/covers/Mago-De-Oz-La-Ciudad-De-Los-Arboles-Front-Cover-38317.jpg",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		},
      		{
      			Id : "Puto1235",
      			Title : "Puto",
      			Duration : 12345,
      			Cover : "http://www.covershut.com/covers/Mago-De-Oz-La-Ciudad-De-Los-Arboles-Front-Cover-38317.jpg",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		},
      		{
      			Id : "Pendejo123213",
      			Title : "Pendejo",
      			Duration : 12345,
      			Cover : "http://www.covershut.com/covers/Mago-De-Oz-La-Ciudad-De-Los-Arboles-Front-Cover-38317.jpg",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		},
      		{
      			Id : "Gay235",
      			Title : "Gay",
      			Duration : 12345,
      			Cover : "http://www.covershut.com/covers/Mago-De-Oz-La-Ciudad-De-Los-Arboles-Front-Cover-38317.jpg",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		},{
      			Id : "Gay2352",
      			Title : "Gay2",
      			Duration : 1234522,
      			Cover : "http://www.covershut.com/covers/Mago-De-Oz-La-Ciudad-De-Los-Arboles-Front-Cover-38317.jpg",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		}
	    ]

	    $localForage.setItem('songList',vm.list);*/

		var viewModal = ''
        $ionicModal.fromTemplateUrl('templates/nowPlaying.html', {
	     scope: $scope,
	     animation: 'slide-in-up'
	    }).then(function(modal) {
	      viewModal = modal;
	    });

	    $rootScope.showPlayNow = function(id,position,showModal){
	    	$rootScope.showSearch = false
	    	vm.songList = ''
	    	vm.searchSong = ''

	    	if(undefined == showModal){
	    		viewModal.show()

	    	}else{
	    		if(showModal == false){
	    			vm.closePlayNow()
	    		}
	    	}

	    	
	    	if(undefined != id && undefined != position){
	    		//tocar canción
		    	var args = {
		    		id : id,
		    		position : position
		    	}
		    	$rootScope.$emit('playSong', args);
	    	}
	    }

	    vm.closePlayNow = function(){
	    	viewModal.hide()
	    }

	    $rootScope.closeModal = vm.closePlayNow

	    //disparar evento cuando se cierre el teclado
	    window.addEventListener('native.keyboardhide', function(){
	    	$rootScope.showSearch = false
	    });

		
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .directive('autoListDivider', autoListDivider);

	 autoListDivider.$inject = ['$timeout']

	function autoListDivider($timeout) {
		var lastDivideKey = "";
		return {
			link: function(scope, element, attrs) {
				var key = attrs.autoListDividerValue;

				var defaultDivideFunction = function(k){
					return k.slice( 0, 1 ).toUpperCase();
				}
	      
				var doDivide = function(){
					var divideFunction = scope.$apply(attrs.autoListDividerFunction) || defaultDivideFunction;
					var divideKey = divideFunction(key);
					
					if(divideKey != lastDivideKey) { 
						var contentTr = angular.element("<div class='item item-divider'>"+divideKey+"</div>");
						element[0].parentNode.insertBefore(contentTr[0], element[0]);
					}

					lastDivideKey = divideKey;
				}
			  
				$timeout(doDivide,0)
			}
		}
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .directive('ionSideMenuContentScale', ionSideMenuContentScale);
	  ionSideMenuContentScale.$inject = [
	  	'$timeout','$rootScope','$ionicModal'
	  ]

	function ionSideMenuContentScale($timeout,$rootScope,$ionicModal) {
		  return {
		    restrict: 'AC',
		    link: function(scope, element, attrs) {
		      scope.$watch(function() {
		        return element.attr('style');
		      }, function(newValue){
		        if(typeof newValue != "undefined"){
		          var transform = newValue.replace("transform: translate3d","");
		          transform = transform.replace(/[^\w\s]/gi, '');
		          transform = transform.replace(/px/gi, '');
		          var axis = transform.split(" ");
		          if(typeof axis[0] != "undefined" && parseInt(axis[0]) != 0){
		            element.addClass('side-menu-open');
		          }else{
		            element.removeClass('side-menu-open');
		          }

		        }

		      });
		    }
		  }
	}
})();
/*!
 * angular-ripple.js v0.0.5 - A standalone AngularJS implementation of the Google Material Design ripple effect.
 * Copyright (c) 2014 Nelson Cash - http://github.com/nelsoncash/angular-ripple
 * http://codepen.io/MikeMcChillin/pen/XJrLwg
 * License: MIT
 */

(function(window, angular, undefined) {
  'use strict';

  if(!angular) {
    return;
  }

  var rip = angular.module('angularRipple', []);

  rip.directive('angularRipple', function() {
    return {
      restrict: 'A',
      link: function (scope, element, attrs) {
        var x, y, size, offsets,
          func = function(e){
            var ripple = this.querySelector('.angular-ripple');
            var eventType = e.type;
            // Ripple
            if (ripple === null) {
              // Create ripple
              ripple = document.createElement('span');
              ripple.className += ' angular-ripple';

              // Prepend ripple to element
              this.insertBefore(ripple, this.firstChild);

              // Set ripple size
              if (!ripple.offsetHeight && !ripple.offsetWidth) {
                size = Math.max(element[0].offsetWidth, element[0].offsetHeight);
                ripple.style.width = size + 'px';
                ripple.style.height = size + 'px';
              }
            }

            // Remove animation effect
            ripple.className = ripple.className.replace(/ ?(animate)/g, '');

            // get click coordinates by event type
            if (eventType === 'mouseup') {
              x = e.pageX;
              y = e.pageY;
            } else if (eventType === 'touchend') {
              try {
                var origEvent;

                if (typeof e.changedTouches !== 'undefined') {
                  origEvent = e.changedTouches[0];
                } else {
                  origEvent = e.originalEvent;
                }

                x = origEvent.pageX;
                y = origEvent.pageY;
              } catch (e) {
                // fall back to center of el
                x = ripple.offsetWidth / 2;
                y = ripple.offsetHeight / 2;
              }
            }

            // set new ripple position by click or touch position
            function getPos(element) {
              var de = document.documentElement;
              var box = element.getBoundingClientRect();
              var top = box.top + window.pageYOffset - de.clientTop;
              var left = box.left + window.pageXOffset - de.clientLeft;
              return { top: top, left: left };
            }

            offsets = getPos(element[0]);
            ripple.style.left = (x - offsets.left - size / 2) + 'px';
            ripple.style.top = (y - offsets.top - size / 2) + 'px';

            // Add animation effect
            ripple.className += ' animate';
          }

        element.on('touchend mouseup', func);

        //remove the event listener on scope destroy
        scope.$on('$destroy',function() {
          element.off('touchend mouseup', func);
        });
      }
    };
  });
})(window, window.angular);
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .service('favoriteSongs', favoriteSongs);
	  favoriteSongs.$inject = [
	  	'$localForage',
	  	'$q'
	  ]

	function favoriteSongs($localForage,$q) {
		  var vm = this

		  vm.getFavoritSongs = function(){
		  	var deferred = $q.defer()
		  	$localForage.getItem('favoriteSongs').then(function(songs){
		  		 deferred.notify(songs);
		  		if(undefined != songs){
		  			deferred.resolve(songs);
		  		}else{
		     		deferred.resolve([]);
		  		}
		  	})
		  	return deferred.promise;
		  }

		  vm.addtoFavorite = function(id){
		  	 vm.getFavoritSongs().then(function(songs){
		  	 	var currentSongs = songs
		  	 	//buscar la canción
	    		$localForage.getItem('songList').then(function(songList){
    				var currentSong = _.find(songList,{'Id' : id})

    				if(undefined != currentSong && null != currentSong){
    					//console.log('añadiendo => '+currentSong)
    					currentSongs.push(currentSong)
    					$localForage.setItem('favoriteSongs',currentSongs)
    				}
    			})
		  	 })
		  }

		  vm.isFavorite = function(id){
		  	//console.log('Id de la cancion => '+id)
		  	var deferred = $q.defer();
		  	vm.getFavoritSongs().then(function(songs){
		  	 	var currentSongs = songs
		  	 	//console.log(currentSongs)

		  	 	var currentSong = _.find(songs,{'Id' : id})

		  	 	if(undefined != currentSong && null != currentSong){
		  	 		deferred.resolve('true');
		  	 	}else{
		  	 		deferred.resolve('false');
		  	 	}
		  	 	//buscar la canción
		  	 	/*if(currentSongs.length > 0){
		    		for(var i = 0; i < currentSongs.length; i++){
		    			if(currentSongs[i].Id == id){
			    			//no existe la añadimos
			    			//console.log('ya es favorita => '+id)
			    			 deferred.resolve('true');
			    		}else{
			    			//console.log('no es favorita => '+id)
			    			 deferred.resolve('false');
		    			}
		    		}
	    		}else{
	    			deferred.resolve('false');
	    		}*/
		  	 })

		  	return  deferred.promise;
		  }

		  vm.deleteSong = function(id){
		  	 //buscamos la canción
		  	 vm.getFavoritSongs().then(function(songs){
		  	 	var currentSongs = songs
		  	 	//console.log(currentSongs,id)
		  	 	//buscar la canción
		  	 	var currentSong = _.find(currentSongs,{'Id' : id})
		  	 	//console.log(currentSong)

	    		if(undefined != currentSong && null != currentSong){
	    			//no existe la añadimos
	    			var newSongs = _.pull(currentSongs, currentSong);
	    			//console.log(newSongs)
	    			$localForage.setItem('favoriteSongs',newSongs)
	    		}else{
	    			console.log('No existe esta canción')
	    		}
		  	 })
		  }
	}
})();
(function() {
  'use strict';

  angular
    .module('music-player')
    .service('searchFiles', searchFiles);

  searchFiles.$inject = ['$q'];

  function searchFiles($q) {
    //content
      var vm = this
      vm.response = ''

      vm.searchInDirectorys = function(){
         var deferred = $q.defer();
        document.addEventListener('deviceready', function () {
         
          cordova.plugins.getExtPath.coolMethod("getMusic",function(music){
             deferred.resolve(music);
          },function(msg){
            deferred.reject(msg);
          }) //terminal plugin extPath
          
        });
        return deferred.promise;
      }
    
  }
})();