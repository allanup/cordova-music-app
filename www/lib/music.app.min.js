(function(){
  'use strict'

  angular.module('music-player', ['ionic','ngCordova','LocalForageModule'])

  .run(function($ionicPlatform,$rootScope) {
    $rootScope.hideMiniControls = false
    $ionicPlatform.ready(function() {

      // then override any default you want
        /*window.plugins.nativepagetransitions.globalOptions.duration = 500;
        window.plugins.nativepagetransitions.globalOptions.iosdelay = 350;
        window.plugins.nativepagetransitions.globalOptions.androiddelay = 350;
        window.plugins.nativepagetransitions.globalOptions.winphonedelay = 350;
        window.plugins.nativepagetransitions.globalOptions.slowdownfactor = 4;
        // these are used for slide left/right only currently
        window.plugins.nativepagetransitions.globalOptions.fixedPixelsTop = 0;
        window.plugins.nativepagetransitions.globalOptions.fixedPixelsBottom = 0;*/
      // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
      // for form inputs)
      if (window.cordova && window.cordova.plugins.Keyboard) {
        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
        cordova.plugins.Keyboard.disableScroll(true);
      }
      if (window.StatusBar) {
        // org.apache.cordova.statusbar required
        if (cordova.platformId == 'android') {
            StatusBar.backgroundColorByHexString("#fff");
        }
                //StatusBar.styleDefault();
      }

    });
  })

  .config(function($stateProvider, $urlRouterProvider,$localForageProvider) {
    
    //configurando la base de datos, almacenará la información de la música,
    //así como las listas de reproducción y demás configuraciones
    $localForageProvider.config({
        driver      : localforage.WEBSQL, // if you want to force a driver
        name        : 'music-player', // name of the database and prefix for your data, it is "lf" by default
        version     : 1.0, // version of the database, you shouldn't have to use this
        storeName   : 'keyvaluepairs' // name of the table
    });


    $stateProvider

    .state('app', {
      url: '/app',
      abstract: true,
      templateUrl: 'templates/menu.html'
    })

    .state('app.songlist', {
      url: '/songlist',
      views: {
        'menuContent': {
          templateUrl: 'templates/songList.html',
          controller: 'songListCtrl as songList'
        }
      }
    })

    .state('app.favourites', {
      url: '/favourites',
      views: {
        'menuContent': {
          templateUrl: 'templates/favourites.html',
          controller: 'favouritesCtrl as favourite'
        }
      }
    })

    /*.state('app.nowplaying', {
      url: '/nowplaying/:id/:position/:play',
      views: {
        'menuContent': {
          templateUrl: 'templates/nowPlaying.html',
          controller: 'nowPlayingCtrl as playing'
        }
      }
    })*/


    /*.state('app.search', {
      url: '/search',
      views: {
        'menuContent': {
          templateUrl: 'templates/search.html'
        }
      }
    })

    .state('app.browse', {
        url: '/browse',
        views: {
          'menuContent': {
            templateUrl: 'templates/browse.html'
          }
        }
      })
      
    .state('app.single', {
      url: '/playlists/:playlistId',
      views: {
        'menuContent': {
          templateUrl: 'templates/playlist.html',
          controller: 'PlaylistCtrl'
        }
      }
    });*/
    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/app/songlist');
  });

})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('favouritesCtrl', favouritesCtrl);

	favouritesCtrl.$inject = ['$scope','$localForage','$rootScope','favoriteSongs'];

	function favouritesCtrl($scope,$localForage,$rootScope,favoriteSongs) {
		//content
		var vm = this
		vm.list = ''
		vm.songList = ''

		$scope.$on("$ionicView.beforeEnter",function(){
			favoriteSongs.getFavoritSongs().then(function(songs){
				vm.list = songs
			},function(fail){
				console.log('Fallo porque => '+fail)
			})
		})
		
		$rootScope.globalSearch = function(){
			$rootScope.showSearch = true
		}

		//disparar evento cuando se cierre el teclado
	    window.addEventListener('native.keyboardhide', function(){
	    	$rootScope.showSearch = false
	    });
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('homeCtrl', homeCtrl);

	homeCtrl.$inject = [
		'$cordovaFile'
	];

	function homeCtrl($cordovaFile) {
		
	}

})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('listCtrl', listCtrl);

	listCtrl.$inject = [];

	function listCtrl() {
		
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('nowPlayingCtrl', nowPlayingCtrl);

	nowPlayingCtrl.$inject = ['$scope','$rootScope','$localForage','$stateParams','$cordovaMedia','favoriteSongs'];

	function nowPlayingCtrl($scope,$rootScope,$localForage,$stateParams,$cordovaMedia,favoriteSongs) {
		//content
		var vm = this,
		duration = 0,
		currentSongPosition = parseInt($stateParams.position),
		currentSongId = $stateParams.id,
		playSongAtEnter = $stateParams.play
		vm.song = "";
		vm.totalDuration = 0
		var currentTiemSong = {
			h : 0,
			m : 0,
			s : 0
		}

		vm.isFavorite = false
		$rootScope.isShuffle = false


		/*favoriteSongs.getFavoritSongs().then(function(greeting) {
		  alert('Success: ' + greeting);
		}, function(reason) {
		  alert('Failed: ' + reason);
		}, function(update) {
		  alert('Got notification: ' + update);
		})
		//

		//ocultar el reproductor mini
		/*$scope.$on( "$ionicView.beforeEnter", function( scopes, states ) {
	        $rootScope.hideMiniControls = true
	    });

	    $scope.$on("$ionicView.leave",function(scopes,states){
	    	$rootScope.hideMiniControls = false
	    })*/

		//@$stateParams.id identificador de cancion
		//@$stateParams.position posición del arreglo

		vm.getCurrentSong = function(id,position){
			//si el id y la posición no están vacíos
			$rootScope.hideMiniControls = false
			vm.durationensecs = 0
			if(undefined != id && undefined != position){

				$localForage.getItem('songList').then(function(songs) {
					//se parseo el Id porque sino, no encuentra la canción,
					//por el tipo de dato
					//limpiar el intervalo de tiempo
					//console.log(songs)
					clearInterval(duration)
					clearIntervals()
					vm.song = _.find(songs, { 'Id': id });
					//console.log('escribe!!! => '+id+' > '+position)
					vm.durationensecs = parseInt(vm.song.Duration) / 1000           
		        	vm.totalDuration = secs2time(parseInt(vm.song.Duration)/1000);
		        	vm.song.Duration = secs2time(parseInt(vm.song.Duration)/1000);
		        	$rootScope.songTitle = vm.song.Title
		        	$rootScope.songAuthor = vm.song.Author
		        	$rootScope.songCover = vm.song.Cover
		        	$rootScope.songId = id
		        	//console.log(id)

		        	//verificar que sea favorita
		        	favoriteSongs.isFavorite(id).then(function(is){
		        		//console.log('la cancion es favorita? => '+is)
		        		if(is == 'true'){
			    			vm.isFavorite = true
		        		}else{
		        			vm.isFavorite = false
		        		}
		        	})

		        	//widget
			        MusicControls.destroy()

			        MusicControls.create({
					    track: vm.song.Title,				//Requierd 
						artist: vm.song.Author,			//Required 
					    cover: vm.song.Cover,	//Required 
						album: vm.song.Album,				//Optional, Only visible on Android 
					    isPlaying: true,				//Required
						ticker : "Escuchando : "+vm.song.Title
					}, onSuccess, onError);

			        if($rootScope.isPlaying){
						vm.stopSong(); //detener la canción actual
					}
			        //comienza para reproducción
					$rootScope.media = $cordovaMedia.newMedia(vm.song.Path);
					
					$rootScope.playSong()
					
					//almacenar la posición actual de la canción
					$rootScope.songPosition = position
					$rootScope.isPlaying = true;

					document.getElementById('circle').style['stroke-dashoffset'] = 200
					//actualizar la barra de tiempo
					var time = vm.durationensecs; /* how long the timer runs for */
					var initialOffset = '200';
					var i = 1
					$rootScope.interval = setInterval(function() {
					document.getElementById('circle').style['stroke-dashoffset'] = initialOffset-(i*(initialOffset/time))
					    if (i == time) {
					    	clearIntervals()
					    }
					    if(!$rootScope.pauseInterval){
					    	i++;  
					    }
					}, 1000);

					//duración de canción
					duration = setInterval(function(){
						//vm.song.Duration => {h,i,s}
						$rootScope.media.currentTime().then(
							function(data){
								//console.log('tiempo => '+data.status.value)
								var tiempoActual = secs2time(parseInt(data.status.value))
								var sec = 0;
								var mins = 0;
								var hrs = 0;
								if(tiempoActual.h <= 9){
									hrs = '0'+tiempoActual.h
								}else{
									hrs = tiempoActual.h
								}
								if(tiempoActual.m <= 9){
									mins = '0'+tiempoActual.m
								}else{
									mins = tiempoActual.m
								}
								if(tiempoActual.s <= 9){
									sec = '0'+tiempoActual.s
								}else{
									sec = tiempoActual.s
								}

								//actualizar el tiempo de la canción
								vm.song.Duration.h = hrs
								vm.song.Duration.m = mins
								vm.song.Duration.s = sec

								//verificar cuado acabe una canción y cambiar a la siguiente
								
								if(parseInt(hrs) == vm.totalDuration.h 
									&& parseInt(mins) == vm.totalDuration.m 
									&& parseInt(sec) == (vm.totalDuration.s-2)
								){
									//console.log(hrs,mins,sec,vm.totalDuration.h,vm.totalDuration.m,vm.totalDuration.s-2)
									$rootScope.nextSong($rootScope.songPosition);

								}
							},
							function(error){
								console.log('error => '+error)
							}
						);
						
					},1000)
		        });

			}
		}

		function clearIntervals(){
			clearInterval($rootScope.interval);
		}

		function onSuccess(success){
			console.log('Bien! => '+success)

			function events(action) {
				switch(action){
					case 'music-controls-next':
						//Do something 
						clearIntervals()
						$rootScope.nextSong($rootScope.songPosition);
					break;
					case 'music-controls-previous':
						//Do something 
						clearIntervals()
						$rootScope.prevSong($rootScope.songPosition);
					break;
					case 'music-controls-pause':
						//Do something
						if($rootScope.isPlaying){
							$rootScope.pauseSong()
							MusicControls.updateIsPlaying(false);
						}else{
							$rootScope.playSong()
							MusicControls.updateIsPlaying(true);
						}
					break;
					case 'music-controls-play':
						//Do something 
						$rootScope.playSong()
						MusicControls.updateIsPlaying(true);
					break;
			 
					//Headset events 
					case 'music-controls-headset-unplugged':
						//Do something 
						break;
					case 'music-controls-headset-plugged':
						//Do something 
						break;
					case 'music-controls-headset-button':
						//Do something 
						break;
					default:
						break;
				}
			}

			//Register callback 
			MusicControls.subscribe(events);
			 
			//Start listening for events 
			MusicControls.listen();
		}

		function onError(error){
			console.log('error => '+error)
		}

		$rootScope.playSong = function(){
			$rootScope.isPlaying = true
			$rootScope.pauseInterval = false
			$rootScope.media.play()
		}
		$rootScope.pauseSong = function(){
			$rootScope.isPlaying = false
			$rootScope.pauseInterval = true
			$rootScope.media.pause()
		}
		vm.stopSong = function(){
			$rootScope.media.stop()
		}
		$rootScope.nextSong = function(position){
			position = (undefined != position) ? position : 0;
			
			//si está activado el shuffle
			if(!$rootScope.isShuffle){
				$localForage.getItem('songList').then(function(songs) {
					var posicion = songs[position+1]
					//posicion devuelve un objeto de cancion
					var Id = (undefined != posicion) ? posicion.Id : songs[0].Id ;
					if(undefined != posicion){
					   vm.getCurrentSong(Id,parseInt(position)+1)	
					}else{
						//mostrar la primera canción de la lista
					    vm.getCurrentSong(Id,0)
					}
				});
			}else{
				$rootScope.shuffle()
			}
		}
		$rootScope.prevSong = function(position){
			//con la posición del arreglo, buscar en el arreglo de canciones
			//su Id para reproducirla
			if(!$rootScope.isShuffle){
				position = (undefined != position) ? position : 0;
				$localForage.getItem('songList').then(function(songs) {
					var posicion = songs[parseInt(position)-1]
					var Id = (undefined != posicion) ? posicion.Id : songs[0].Id ;
					if(undefined != posicion){  
					   vm.getCurrentSong(Id,parseInt(position)-1)	
					}else{
						//mostrar la primera canción de la lista
					   vm.getCurrentSong(Id,0)
					}
				});
			}else{
				$rootScope.shuffle()
			}
		}

		function secs2time(secs){
	        var hours = Math.floor(secs / (60 * 60));

	        var divisor_for_minutes = secs % (60 * 60);
	        var minutes = Math.floor(divisor_for_minutes / 60);

	        var divisor_for_seconds = divisor_for_minutes % 60;
	        var seconds = Math.ceil(divisor_for_seconds);

	        var obj = {
	            "h": hours,
	            "m": minutes,
	            "s": seconds
	        };
	        return obj;
	    }

	    //other controls
	    $rootScope.shuffle = function(){
	    	//reproducir canciones aleatorias (sencillo)
	    	//obtener la longitud de las canciones
	    	$localForage.getItem('songList').then(function(songs){
	    		var length = songs.length,
	    		newposition = _.random(length),
	    		playthis = songs[newposition]

	    		$rootScope.isShuffle = true
	    		vm.getCurrentSong(playthis.Id,newposition)
	    	})
	    }

	    $rootScope.addtoFavorites = function(id){
	    	//añadir a favoritos
	    	favoriteSongs.isFavorite(id).then(function(is){
        		//console.log('la cancion es favorita? => '+is,id)
        		if(is == 'true'){
        			//console.log('si es favorita')
        			favoriteSongs.deleteSong(id)
	    			vm.isFavorite = false
        		}else{
        			//console.log('no es favorita')
        			favoriteSongs.addtoFavorite(id)
	    			vm.isFavorite = true
        		}
        	})
	    }

	    $rootScope.$on('playSong', function(event, args) {
	    	vm.getCurrentSong(args.id,args.position)
	    });

	    
		//vm.getCurrentSong(currentSongId,currentSongPosition)
	    

		//obtener la información de la canción en curso
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .controller('songListCtrl', songListCtrl);

	songListCtrl.$inject = ['$rootScope','$scope','$ionicModal','$cordovaFile','searchFiles','$localForage'];

	function songListCtrl($rootScope,$scope,$ionicModal,$cordovaFile,searchFiles,$localForage) {
		//content
		var vm = this
		vm.list = []
		vm.songList = ''

		$rootScope.globalSearch = function(){
			$rootScope.showSearch = true
		}

		searchFiles.searchInDirectorys().then(function(songList){
	      	

	      	//obtener la lista

	      	for(var i = 0; i < songList.length; i++){
	      		/*
				items.put("Id", thisId);
                    items.put("Album", album);
                    items.put("Author", author);
                    items.put("Title", title);
                    items.put("Genre", genero);
                    items.put("Cover", encoded);
                    items.put("Duration", Duration);
                    items.put("Path", thisPath);
	      		*/
	      		var song = {
	      			Id : (songList[i].Title + songList[i].Duration).replace(/\W+/g, "").replace(/\s/g,""),
	      			Title : songList[i].Title,
	      			Duration : songList[i].Duration,
	      			Cover : songList[i].Cover,
	      			Author : songList[i].Author,
	      			Genre : songList[i].Genre,
	      			Path : songList[i].Path,
	      			Album : songList[i].Album
	      		}

	      		vm.list.push(song)
	      	}

	      	//console.log(vm.list)
	      	//guardar en la base de datos la información de las canciones
	      	$localForage.setItem('songList',vm.list);
	      
	    },function(error){
	      alert(error)
	    })

	   /* vm.list = [
	    	{
      			Id : "Sorry1234123",
      			Title : "Sorry",
      			Duration : 12345,
      			Cover : "/sdpath/",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		},
      		{
      			Id : "Puto1235",
      			Title : "Puto",
      			Duration : 12345,
      			Cover : "/sdpath/",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		},
      		{
      			Id : "Pendejo123213",
      			Title : "Pendejo",
      			Duration : 12345,
      			Cover : "/sdpath/",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		},
      		{
      			Id : "Gay235",
      			Title : "Gay",
      			Duration : 12345,
      			Cover : "/sdpath/",
      			Author : "Justin Bieber",
      			Genre : "",
      			Path : "/sdtpa",
      			Album : "Sorry"
      		}
	    ]

	    $localForage.setItem('songList',vm.list);*/

		var viewModal = ''
        $ionicModal.fromTemplateUrl('templates/nowPlaying.html', {
	     scope: $scope,
	     animation: 'slide-in-up'
	    }).then(function(modal) {
	      viewModal = modal;
	    });

	    $rootScope.showPlayNow = function(id,position){
	    	$rootScope.showSearch = false
	    	vm.songList = ''
	    	viewModal.show()
	    	if(undefined != id && undefined != position){
	    		//tocar canción
		    	var args = {
		    		id : id,
		    		position : position
		    	}
		    	$rootScope.$emit('playSong', args);
	    	}
	    }

	    vm.closePlayNow = function(){
	    	viewModal.hide()
	    }

	    //disparar evento cuando se cierre el teclado
	    window.addEventListener('native.keyboardhide', function(){
	    	$rootScope.showSearch = false
	    });

		
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .service('favoriteSongs', favoriteSongs);
	  favoriteSongs.$inject = [
	  	'$localForage',
	  	'$q'
	  ]

	function favoriteSongs($localForage,$q) {
		  var vm = this

		  vm.getFavoritSongs = function(){
		  	var deferred = $q.defer()
		  	$localForage.getItem('favoriteSongs').then(function(songs){
		  		 deferred.notify(songs);
		  		if(undefined != songs){
		  			deferred.resolve(songs);
		  		}else{
		     		deferred.resolve([]);
		  		}
		  	})
		  	return deferred.promise;
		  }

		  vm.addtoFavorite = function(id){
		  	 vm.getFavoritSongs().then(function(songs){
		  	 	var currentSongs = songs
		  	 	//buscar la canción
	    		$localForage.getItem('songList').then(function(songList){
    				var currentSong = _.find(songList,{'Id' : id})

    				if(undefined != currentSong && null != currentSong){
    					//console.log('añadiendo => '+currentSong)
    					currentSongs.push(currentSong)
    					$localForage.setItem('favoriteSongs',currentSongs)
    				}
    			})
		  	 })
		  }

		  vm.isFavorite = function(id){
		  	//console.log('Id de la cancion => '+id)
		  	var deferred = $q.defer();
		  	vm.getFavoritSongs().then(function(songs){
		  	 	var currentSongs = songs
		  	 	//console.log(currentSongs)

		  	 	var currentSong = _.find(songs,{'Id' : id})

		  	 	if(undefined != currentSong && null != currentSong){
		  	 		deferred.resolve('true');
		  	 	}else{
		  	 		deferred.resolve('false');
		  	 	}
		  	 	//buscar la canción
		  	 	/*if(currentSongs.length > 0){
		    		for(var i = 0; i < currentSongs.length; i++){
		    			if(currentSongs[i].Id == id){
			    			//no existe la añadimos
			    			//console.log('ya es favorita => '+id)
			    			 deferred.resolve('true');
			    		}else{
			    			//console.log('no es favorita => '+id)
			    			 deferred.resolve('false');
		    			}
		    		}
	    		}else{
	    			deferred.resolve('false');
	    		}*/
		  	 })

		  	return  deferred.promise;
		  }

		  vm.deleteSong = function(id){
		  	 //buscamos la canción
		  	 vm.getFavoritSongs().then(function(songs){
		  	 	var currentSongs = songs
		  	 	//console.log(currentSongs,id)
		  	 	//buscar la canción
		  	 	var currentSong = _.find(currentSongs,{'Id' : id})
		  	 	//console.log(currentSong)

	    		if(undefined != currentSong && null != currentSong){
	    			//no existe la añadimos
	    			var newSongs = _.pull(currentSongs, currentSong);
	    			//console.log(newSongs)
	    			$localForage.setItem('favoriteSongs',newSongs)
	    		}else{
	    			console.log('No existe esta canción')
	    		}
		  	 })
		  }
	}
})();
(function() {
  'use strict';

  angular
    .module('music-player')
    .service('searchFiles', searchFiles);

  searchFiles.$inject = ['$q'];

  function searchFiles($q) {
    //content
      var vm = this
      vm.response = ''

      vm.searchInDirectorys = function(){
         var deferred = $q.defer();
        document.addEventListener('deviceready', function () {
         
          cordova.plugins.getExtPath.coolMethod("getMusic",function(music){
             deferred.resolve(music);
          },function(msg){
            deferred.reject(msg);
          }) //terminal plugin extPath
          
        });
        return deferred.promise;
      }
    
  }
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .directive('ionSideMenuContentScale', ionSideMenuContentScale);
	  ionSideMenuContentScale.$inject = [
	  	'$timeout','$rootScope','$ionicModal'
	  ]

	function ionSideMenuContentScale($timeout,$rootScope,$ionicModal) {
		  return {
		    restrict: 'AC',
		    link: function(scope, element, attrs) {
		      scope.$watch(function() {
		        return element.attr('style');
		      }, function(newValue){
		        if(typeof newValue != "undefined"){
		          var transform = newValue.replace("transform: translate3d","");
		          transform = transform.replace(/[^\w\s]/gi, '');
		          transform = transform.replace(/px/gi, '');
		          var axis = transform.split(" ");
		          if(typeof axis[0] != "undefined" && parseInt(axis[0]) != 0){
		            element.addClass('side-menu-open');
		          }else{
		            element.removeClass('side-menu-open');
		          }

		        }

		      });
		    }
		  }
	}
})();
(function() {
	'use strict';

	angular
	  .module('music-player')
	  .directive('goNative', goNative);
	  goNative.$inject = [
	  	'$ionicGesture',
	  	'$ionicPlatform'
	  ]
	function goNative($ionicGesture,$ionicPlatform) {
		
  return {
    restrict: 'A',
 
    link: function(scope, element, attrs) {
 
      $ionicGesture.on('tap', function(e) {
 
        var direction = attrs.direction;
        var transitiontype = attrs.transitiontype;
 
        $ionicPlatform.ready(function() {
 
          switch (transitiontype) {
            case "slide":
              window.plugins.nativepagetransitions.slide({
                  "direction": direction
                },
                function(msg) {
                  console.log("success: " + msg)
                },
                function(msg) {
                  alert("error: " + msg)
                }
              );
              break;
            case "flip":
              window.plugins.nativepagetransitions.flip({
                  "direction": direction
                },
                function(msg) {
                  console.log("success: " + msg)
                },
                function(msg) {
                  alert("error: " + msg)
                }
              );
              break;
               
            case "fade":
              window.plugins.nativepagetransitions.fade({
                   
                },
                function(msg) {
                  console.log("success: " + msg)
                },
                function(msg) {
                  alert("error: " + msg)
                }
              );
              break;
 
            case "drawer":
              window.plugins.nativepagetransitions.drawer({
                  "origin"         : direction,
                  "action"         : "open"
                },
                function(msg) {
                  console.log("success: " + msg)
                },
                function(msg) {
                  alert("error: " + msg)
                }
              );
              break;
               
            case "curl":
              window.plugins.nativepagetransitions.curl({
                  "direction": direction
                },
                function(msg) {
                  console.log("success: " + msg)
                },
                function(msg) {
                  alert("error: " + msg)
                }
              );
              break;              
               
            default:
              window.plugins.nativepagetransitions.slide({
                  "direction": direction
                },
                function(msg) {
                  console.log("success: " + msg)
                },
                function(msg) {
                  alert("error: " + msg)
                }
              );
          }
 
 
        });
      }, element);
    }
  };	
}

})();